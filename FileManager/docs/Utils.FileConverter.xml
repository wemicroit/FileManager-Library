<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Utils.FileConverter</name>
    </assembly>
    <members>
        <member name="T:WeMicroIt.Utils.FileConverter.FileManager">
            <summary>
        This Class contains all of the logic beyond the File Manager.
      </summary><remark>
        <para>Use IFileManage to dependency inject this service.</para>
        <para>Common use cases are read, write &amp; transform.</para>
      </remark> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.#ctor">
            <summary>
        The default constructor used to build an instance of File Manager.
      </summary><remark>
        <para> This also initiatizes the child services such as CSV, JSON &amp; XML conversion.</para>
      </remark><example>
        <code>
          FileManager fileManager = new FileManager();
        </code>
      </example> 
        </member>
        <member name="P:WeMicroIt.Utils.FileConverter.FileManager.Reader">
            <value>
        Gets/Sets the readers full path.
      </value> 
        </member>
        <member name="P:WeMicroIt.Utils.FileConverter.FileManager.Writer">
            <value>
        Gets/Sets the writers full path.
      </value> 
        </member>
        <member name="P:WeMicroIt.Utils.FileConverter.FileManager.Templater">
            <value>
        Gets/Sets the templater full path.
      </value> 
        </member>
        <member name="P:WeMicroIt.Utils.FileConverter.FileManager.FilesExist">
            <value>
        Gets a value which indicates if all of the set files exist.
      </value> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.SetAllFiles(System.String,System.String,System.String)">
            <summary>
        Sets the path to the 2-3 files streams.
      </summary><param name="read">Path to the read file.</param><param name="write">Path to the write file.</param><param name="template">Path to the template file.</param><returns>
        If all the files/directories exist.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc= fileManager.SetAllFiles(string, string, string);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.ReadFile">
            <summary>
        Reads data from the specified file
      </summary><returns>
        The contents of the file as one big block
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          string data= fileManager.ReadFile();
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.ReadLine">
            <summary>
        Reads the next line from the specified file
      </summary><returns>
        The a single line of the file which is the stream is currently pointing to.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          string data= fileManager.ReadLine();
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.ReadLines">
            <summary>
        Reads all the remaing lines of the specified file
      </summary><returns>
        Each individual line of the line of the file in a list;
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          List&lt;string&gt; data = fileManager.ReadLines();
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.ReadCSV``1">
            <summary>
        Read the following csv doc skipping the first line as it is a header.
      </summary><seealso cref="M:WeMicroIt.Utils.FileConverter.FileManager.ReadCSV``1">To not skip the first row please use this.</seealso><returns>
        A list of objects defined by T.
      </returns><exception cref="T:System.NotSupportedException">Thrown when the file is not a csv file.</exception><example>
        <code>
          FileManager fileManager = new FileManager();
          List&lt;T&gt; data= fileManager.ReadCSV&lt;T&gt;();
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.ReadCSV``1(System.Boolean)">
            <summary>
        Read the following csv doc and only skip the first line if <paramref cref="!:headers" /> is true.
      </summary><param name="headers">Indicates if the first line is to be skipped.</param><returns>
        A list of objects defined by T.
      </returns><exception cref="T:System.NotSupportedException">Thrown when the file is not a csv file.</exception><example>
        <code>
          FileManager fileManager = new FileManager();
          List&lt;T&gt; data= fileManager.ReadCSV&lt;T&gt;();
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.ReadJSON``1">
            <summary>
        Read the following json doc.
      </summary><returns>
        A list of objects defined by T.
      </returns><exception cref="T:System.NotSupportedException">Thrown when the file is not a csv file.</exception><example>
        <code>
          FileManager fileManager = new FileManager();
          List&lt;T&gt; data= fileManager.ReadJSON&lt;T&gt;();
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.ReadXML">
            <summary>
        Read the sprecied xml doc.
      </summary><returns>
        An XDocument which contains all the nodes
      </returns><exception cref="T:System.NotSupportedException">Thrown when the file is not a csv file.</exception><example>
        <code>
          FileManager fileManager = new FileManager();
          XDocument data= fileManager.ReadXML();
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.TransformXML">
            <summary>
        Transform the specified XML using the filetemplate and save it to the destination.
      </summary><returns>
        If the transformation was successful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc = fileManager.TransformXML();
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.SplitXML(System.String,System.String)">
            <summary>
        Split the specified XML file at the node specified by <paramref name="path" />.
      </summary><remarks>
        <para>
          Use <paramref name="idPath" /> as the new file name
        </para>
      </remarks><param name="path">What node should be used for splitting.</param><param name="idPath">What should the new files name be based upon.</param><returns>
        If the split was successful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc = fileManager.SplitXML(string, string);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.SplitAndTransformXML(System.String,System.String,System.String)">
            <summary>
        Split the specified XML file at the node specified by <paramref name="path" /> and put it in groups based upon <paramref name="name" />.
      </summary><remarks>
        <para>
          Use <paramref name="idPath" /> as the new file name
        </para>
      </remarks><param name="path">What node should be used for splitting.</param><param name="idPath">What should the new files name be based upon.</param><param name="name">What should be used for the grouping.</param><returns>
        If the split/Transform was successful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc = fileManager.SplitAndTransformXML(string, string, string);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.ConvertXMLFolderToRaw(System.Boolean)">
            <summary>
        Convert all the xml files in the directory to a new format.
      </summary><remarks>
        <para>
          Use <paramref name="removeOld" /> to indicate what should happen to the old file.
        </para>
      </remarks><param name="removeOld">if true the file which has been converted will be deleted.</param><returns>
        If the conversion was successful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc = fileManager.ConvertXMLFolderToRaw(bool);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.ConvertXMLToRaw(System.String,System.Boolean)">
            <summary>
        Convert the specified xml file to the format specified by <paramref name="ext" />.
      </summary><remarks>
        <para>
          Use <paramref name="removeOld" /> to indicate what should happen to the old file.
        </para>
      </remarks><param name="removeOld">if true the file which has been converted will be deleted.</param><param name="ext">The extension for the new file.</param><returns>
        If the conversion was successful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc = fileManager.ConvertXMLFolderToRaw(bool);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.WriteBlock(System.String)">
            <exception cref="T:System.ArgumentNullException">Thrown when the data to be written is null.</exception><exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the writer directory is not valid.</exception> 
            <summary>
        Writes the data as the contents <paramrefof name="contents" /> as the specified file.
      </summary><param name="contents">The data which is to be written as a file.</param><returns>
        If the write was successulful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc = fileManager.WriteBlock(string);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.WriteLine(System.String)">
            <exception cref="T:System.ArgumentNullException">Thrown when the data to be written is null.</exception><exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the writer directory is not valid.</exception> 
            <summary>
        Writes a new line specified by <paramrefof name="contents" /> as the specified file.
      </summary><param name="contents">The data which is to be written as a file.</param><returns>
        If the write was successulful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          string data= fileManager.WriteLine(string);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.WriteLine(System.String,System.Boolean)">
            <exception cref="T:System.ArgumentNullException">Thrown when the data to be written is null.</exception><exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the writer directory is not valid.</exception> 
            <summary>
        Writes a new line specified by <paramrefof name="contents" /> as the specified file.
      </summary><param name="contents">The data which is to be written as a file.</param><param name="append">If the data should be append or overwritten.</param><returns>
        If the write was successulful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          string data= fileManager.WriteLine(string, bool);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.WriteLines(System.Collections.Generic.List{System.String})">
            <exception cref="T:System.ArgumentNullException">Thrown when the data to be written is null.</exception><exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the writer directory is not valid.</exception> 
            <summary>
        Writes a series of lines specified by <paramrefof name="contents" /> as the specified file.
      </summary><param name="contents">The data which is to be written as a file.</param><returns>
        If the write was successulful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc = fileManager.WriteLines(List&lt;string&gt;);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.WriteLines(System.Collections.Generic.List{System.String},System.Boolean)">
            <exception cref="T:System.ArgumentNullException">Thrown when the data to be written is null.</exception><exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the writer directory is not valid.</exception> 
            <summary>
        Writes a series of lines specified by <paramrefof name="contents" /> as the specified file.
      </summary><param name="contents">The data which is to be written as a file.</param><param name="append">If the data should be append or overwritten.</param><returns>
        If the write was successulful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc = fileManager.WriteLines(List&lt;string&gt;, bool);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.WriteCSV``1(System.Collections.Generic.List{``0})">
            <exception cref="T:System.ArgumentNullException">Thrown when the data to be written is null.</exception><exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the writer directory is not valid.</exception> 
            <summary>
        Writes the list of objects specified by <paramrefof name="contents" /> as the specified file encoded using CSV.
      </summary><param name="data">The data which is to be written as a file.</param><returns>
        If the write was successulful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc = fileManager.WriteCSV&lt;T&gt;(List&lt;T&gt;);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.WriteCSV``1(System.Collections.Generic.List{``0},System.Boolean)">
            <exception cref="T:System.ArgumentNullException">Thrown when the data to be written is null.</exception><exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the writer directory is not valid.</exception> 
            <summary>
        Append the list of objects specified by <paramrefof name="contents" /> as the specified file encoded using CSV.
      </summary><remark>
        <para>
          The <paramref name="append" /> indicates if the existing should be kept.
        </para>
      </remark><param name="append">A flag indicating if old content is to be kept.</param><param name="data">The data which is to be written as a file.</param><returns>
        If the write was successulful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc = fileManager.WriteCSV&lt;T&gt;(List&lt;T&gt;, bool);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.WriteJSON``1(System.Collections.Generic.List{``0})">
            <exception cref="T:System.ArgumentNullException">Thrown when the data to be written is null.</exception><exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the writer directory is not valid.</exception> 
            <summary>
        Writes the list of objects specified by <paramrefof name="contents" /> as the specified file encoded using JSON.
      </summary><param name="data">The data which is to be written as a file.</param><returns>
        If the write was successulful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc = fileManager.WriteJson&lt;T&gt;(List&lt;T&gt;);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.WriteJSON``1(System.Collections.Generic.List{``0},System.Boolean)">
            <exception cref="T:System.ArgumentNullException">Thrown when the data to be written is null.</exception><exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the writer directory is not valid.</exception> 
            <summary>
        Append the list of objects specified by <paramrefof name="contents" /> as the specified file encoded using JSON.
      </summary><remark>
        <para>
          The <paramref name="append" /> indicates if the existing should be kept.
        </para>
      </remark><param name="append">A flag indicating if old content is to be kept.</param><param name="data">The data which is to be written as a file.</param><returns>
        If the write was successulful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc = fileManager.WriteJson&lt;T&gt;(List&lt;T&gt;, bool);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.WriteXML(System.Xml.Linq.XElement)">
            <exception cref="T:System.ArgumentNullException">Thrown when the data to be written is null.</exception><exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the writer directory is not valid.</exception> 
            <summary>
        Writes the xml document in <paramrefof name="contents" /> as the specified file encoded using XML.
      </summary><param name="data">The document which is to be written as a file.</param><returns>
        If the write was successulful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc = fileManager.WriteXML(XElement);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.WriteXML(System.Xml.Linq.XElement,System.Boolean)">
            <exception cref="T:System.ArgumentNullException">Thrown when the data to be written is null.</exception><exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the writer directory is not valid.</exception> 
            <summary>
        Append the list of objects specified by <paramrefof name="contents" /> as the specified file encoded using JSON.
      </summary><remark>
        <para>
          The <paramref name="append" /> indicates if the existing should be kept.
        </para>
      </remark><param name="append">A flag indicating if old content is to be kept.</param><param name="data">The data which is to be written as a file.</param><returns>
        If the write was successulful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc = fileManager.WriteJson&lt;T&gt;(List&lt;T&gt;, bool);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.WriteXML``1(System.Collections.Generic.List{``0})">
            <exception cref="T:System.ArgumentNullException">Thrown when the data to be written is null.</exception><exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the writer directory is not valid.</exception> 
            <summary>
        Writes the list of objects specified by <paramrefof name="contents" /> as the specified file encoded using XML.
      </summary><param name="data">The data which is to be written as a file.</param><returns>
        If the write was successulful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc = fileManager.WriteXML&lt;T&gt;(T);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.FileManager.WriteXML``1(System.Collections.Generic.List{``0},System.Boolean)">
            <exception cref="T:System.ArgumentNullException">Thrown when the data to be written is null.</exception><exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the writer directory is not valid.</exception> 
            <summary>
        Append the list of objects specified by <paramrefof name="contents" /> as the specified file encoded using JSON.
      </summary><remark>
        <para>
          The <paramref name="append" /> indicates if the existing should be kept.
        </para>
      </remark><param name="append">A flag indicating if old content is to be kept.</param><param name="data">The data which is to be written as a file.</param><returns>
        If the write was successulful.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc = fileManager.WriteJson&lt;T&gt;(List&lt;T&gt;, bool);
        </code>
      </example> 
        </member>
        <member name="T:WeMicroIt.Utils.FileConverter.Interfaces.IFileManager">
            <summary>
        This interface allow's for Depenency Injection of the File Manager service into all the classes.
      </summary><remark>
        <para>This provide a unifed way to interact with the file system as well as undertaking all of the necessary conversion.</para>
      </remark><seealso cref="M:WeMicroIt.Utils.FileConverter.FileManager.#ctor" /> 
        </member>
        <member name="T:WeMicroIt.Utils.FileConverter.Models.FileDetails">
            <summary>
        This Model contains all the different fields which make up a file address to allow for easier manipulation.
      </summary><remark>
        <para>
          It is preferable to use the methods to configure the parameters as it will ensure that they are correctly set.
        </para>
      </remark> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.Models.FileDetails.#ctor">
            <summary>
        The default constructor used to build an instance of File Manager.
      </summary><example>
        <code>
          FileManager fileManager = new FileManager();
        </code>
      </example> 
        </member>
        <member name="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.DirPath">
            <value>
        What is the base directory of where all the files are managed.
      </value> 
        </member>
        <member name="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.SubDirPath">
            <value>
        What is the sub directory which is to be used.
      </value> 
        </member>
        <member name="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.FileName">
            <value>
        What is the file name to be.
      </value> 
        </member>
        <member name="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.FileExt">
            <value>
        What is the extension of the file.
      </value> 
        </member>
        <member name="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.FullFileName">
            <value>
        Joins together the <seealso cref="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.FileName" /> with the <seealso cref="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.FileExt" />."</value> 
        </member>
        <member name="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.FullDirectory">
            <value>
        Combines the <seealso cref="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.DirPath" /> with the <seealso cref="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.SubDirPath" />.
      </value> 
        </member>
        <member name="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.FullPath">
            <value>
        Comines the <seealso cref="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.FullDirectory" /> with the <seealso cref="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.FullFileName" />. Alternatively it breaks a path down to its individual parts.
      </value> 
        </member>
        <member name="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.IsCSV">
            <value>
        Determines if the <seealso cref="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.FileExt" /> is a supported CSV file.
      </value> 
        </member>
        <member name="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.IsJSON">
            <value>
        Determines if the <seealso cref="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.FileExt" /> is a supported JSON file.
      </value> 
        </member>
        <member name="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.IsXML">
            <value>
        Determines if the <seealso cref="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.FileExt" /> is a supported XML file.
      </value> 
        </member>
        <member name="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.IsDirectory">
            <value>
        Does the <seealso cref="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.FullDirectory" /> exist.
      </value> 
        </member>
        <member name="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.IsFile">
            <value>
        Does the <seealso cref="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.FullFileName" /> exist.
      </value> 
        </member>
        <member name="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.Files">
            <value>
        What files are located in the <seealso cref="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.FullDirectory" />.
      </value> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.Models.FileDetails.BuildFileName(System.String)">
            <summary>
        Sets the path arguments based on <paramref name="name" />.
      </summary><remark>
        <para>
          Note it doesn't use <seealso cref="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.DirPath" /> instead it uses <seealso cref="P:WeMicroIt.Utils.FileConverter.Models.FileDetails.SubDirPath" />.
        </para>
      </remark><param name="name">What is the filename/path that needs to be manipulated.</param><returns>
        If the Full Directory Path exists.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc= fileManager.BuildFileName(string);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.Models.FileDetails.DirectoryExists(System.Boolean)">
            <summary>
        Create the directory path if <paramref name="create" /> is true.
      </summary><param name="create">Should the directory be made if the directory path does not exist.</param><returns>
        If the directorry exists at the end of the methodd.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc= fileManager.DirectoryExists(bool);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.Models.FileDetails.FileExists(System.Boolean)">
            <summary>
        Create the file if <paramref name="create" /> is true otherwise deletes it.
      </summary><param name="create">True indicates that it needs to exist whereas false will delete it if it exists.</param><returns>
        If the file exists at the end of the methodd.
      </returns><example>
        <code>
          FileManager fileManager = new FileManager();
          bool rc= fileManager.FileExists(bool);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.Models.FileDetails.GetFiles(System.String)">
            <param name="filter">The search pattern which should restrict the files returned.</param>
            <summary>
        Make a list of all the files which matches the <paramref name="filter" />.
      </summary><example>
        <code>
          FileManager fileManager = new FileManager();
          List&lt;string&gt; files= fileManager.GetFiles(string);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.Models.FileDetails.GetFilePaths(System.String,System.IO.SearchOption)">
            <param name="filter">The search pattern which should restrict the files returned.</param>
            <summary>
        Make a list of all the files which matches the <paramref name="filter" /> and abays the <paramref name="options" />.
      </summary><param name="options">The search options which should be applied</param><example>
        <code>
          FileManager fileManager = new FileManager();
          List&lt;string&gt; files= fileManager.GetFiles(string, System.IO.SearchOption);
        </code>
      </example> 
        </member>
        <member name="M:WeMicroIt.Utils.FileConverter.Models.FileDetails.GetFileNames(System.String,System.IO.SearchOption)">
            <param name="filter">The search pattern which should restrict the files returned.</param>
            <summary>
        Make a list of all the files which matches the <paramref name="filter" /> and abays the <paramref name="options" />.
      </summary><remark>
        <para>Does not include directory path.</para>
      </remark><param name="options">The search options which should be applied</param><example>
        <code>
          FileManager fileManager = new FileManager();
          List&lt;string&gt; files= fileManager.GetFileNames(string, System.IO.SearchOption);
        </code>
      </example> 
        </member>
        <member name="T:WeMicroIt.Utils.FileConverter.Resources.Enums.FileIOType">
            <summary>
        Defines all the different types of file io which can occur.
      </summary> 
        </member>
        <member name="F:WeMicroIt.Utils.FileConverter.Resources.Enums.FileIOType.Block">
            <value>
        This indicates that the data is to be read/written as is from/to the file.
      </value> 
        </member>
        <member name="F:WeMicroIt.Utils.FileConverter.Resources.Enums.FileIOType.Lines">
            <value>
        This indicates that the data is to be read/written as individual lines from/to the file.
      </value> 
        </member>
        <member name="F:WeMicroIt.Utils.FileConverter.Resources.Enums.FileIOType.Line">
            <value>
        This indicates that the data is to be read/written as a single line from/to the file.
      </value> 
        </member>
        <member name="F:WeMicroIt.Utils.FileConverter.Resources.Enums.FileIOType.Data">
            <value>
        This indicates that the data is to be read/written as is from/to the file.
      </value> 
        </member>
        <member name="F:WeMicroIt.Utils.FileConverter.Resources.Enums.FileIOType.Stream">
            <value>
        This indicates that the data is to be read/written from/to the stream.
      </value> 
        </member>
    </members>
</doc>
